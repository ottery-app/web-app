{"ast":null,"code":"import Guardian from './Guardian';\n/** this is the path to the backend */\n\nconst backend = \"http://localhost:8080\";\n/** these are the states that a user can be in */\n\nconst userStates = new Map();\nuserStates.set(\"guardian\", Guardian);\n/**\n * this function is used to set the default success and falre callbacks\n * @param {function} success what to do on success\n * @param {function} error what to do on error\n * @returns {array} [success, error] if the inputs are null they will be updated to the default functions\n */\n\nfunction setDefaults(success, error) {\n  if (!success) {\n    success = res => {\n      console.log(res);\n    };\n  }\n\n  if (!error) {\n    error = err => {\n      console.log(err);\n    };\n  }\n\n  return [success, error];\n}\n\nexport { backend, userStates, setDefaults };","map":{"version":3,"sources":["/home/lewibs/Documents/github/ottery/web-app/src/managers/Manager.js"],"names":["Guardian","backend","userStates","Map","set","setDefaults","success","error","res","console","log","err"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA;;AACA,MAAMC,OAAO,GAAG,uBAAhB;AAEA;;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACAD,UAAU,CAACE,GAAX,CAAe,UAAf,EAA2BJ,QAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASK,WAAT,CAAqBC,OAArB,EAA8BC,KAA9B,EAAqC;AACjC,MAAG,CAACD,OAAJ,EAAa;AACTA,IAAAA,OAAO,GAAIE,GAAD,IAAO;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAiB,KAAnC;AACH;;AAED,MAAG,CAACD,KAAJ,EAAW;AACPA,IAAAA,KAAK,GAAII,GAAD,IAAO;AAACF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AAAiB,KAAjC;AACH;;AAED,SAAO,CAACL,OAAD,EAAUC,KAAV,CAAP;AACH;;AAED,SACIN,OADJ,EAEIC,UAFJ,EAGIG,WAHJ","sourcesContent":["import Guardian from './Guardian';\n\n/** this is the path to the backend */\nconst backend = \"http://localhost:8080\";\n\n/** these are the states that a user can be in */\nconst userStates = new Map();\nuserStates.set(\"guardian\", Guardian);\n\n/**\n * this function is used to set the default success and falre callbacks\n * @param {function} success what to do on success\n * @param {function} error what to do on error\n * @returns {array} [success, error] if the inputs are null they will be updated to the default functions\n */\nfunction setDefaults(success, error) {\n    if(!success) {\n        success = (res)=>{console.log(res)};\n    }\n\n    if(!error) {\n        error = (err)=>{console.log(err)}\n    }\n\n    return [success, error];\n}\n\nexport {\n    backend,\n    userStates,\n    setDefaults,\n}"]},"metadata":{},"sourceType":"module"}