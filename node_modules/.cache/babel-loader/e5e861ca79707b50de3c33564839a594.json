{"ast":null,"code":"import axios from \"axios\";\nimport { backend, setDefaults, userStates } from \"./Manager\";\nimport Guardian from \"./Guardian\";\n/**\n * this is the user manager the state is the manager of the current state that the user is in\n * \n */\n\nfunction User(props) {\n  /*\n  {\n      username: \"\",\n      password: \"\",\n      state: \"\",\n      success: \"\",\n      error: \"\",\n  }\n  */\n\n  /**\n   * this adds a new state to the user\n   * @param {String} state \n   * @param {function} success \n   * @param {function} error \n   */\n  let addState = async (state, success, error) => {\n    [success, error] = setDefaults(success, error);\n\n    try {\n      const res = await axios.post(`${backend}/addState`, {\n        username: props.username,\n        password: props.password,\n        state: state\n      });\n      success(res);\n    } catch (err) {\n      error(err);\n    }\n  };\n  /**\n   * this is usesd to generate a new user\n   * @param {String} email \n   * @param {String} username \n   * @param {String} password \n   * @param {String} firstName \n   * @param {String} middleName \n   * @param {String} lastName \n   * @param {String} gender \n   * @param {String} date \n   * @param {String} country \n   * @param {String} address \n   * @param {String} city \n   * @param {String} state \n   * @param {String} zip \n   * @param {String} phone \n   * @param {function} success \n   * @param {function} error \n   */\n\n\n  let newUser = async (email, username, password, firstName, middleName, lastName, gender, date, country, address, city, state, zip, phone, success, error) => {\n    [success, error] = setDefaults(success, error);\n\n    try {\n      const res = await axios.post(`${backend}/register`, {\n        email: email,\n        username: username,\n        password: password,\n        firstName: firstName,\n        middleName: middleName,\n        lastName: lastName,\n        gender: gender,\n        date: date,\n        country: country,\n        address: address,\n        city: city,\n        state: state,\n        zip: zip,\n        phone: phone\n      });\n      success(res);\n    } catch (err) {\n      error(err);\n    }\n  }; //i dont feel like this belongs here...\n\n\n  let login = async (username, password, success, error) => {\n    try {\n      const res = await axios.post(`${backend}/login`, {\n        username: username,\n        password: password\n      });\n      success(res);\n    } catch (err) {\n      error(err);\n    }\n  };\n\n  if (typeof props.username === \"string\" && typeof props.password === \"string\" && typeof props.state === \"string\") {\n    let returns = {\n      addState: addState\n    };\n    let state = userStates.get(props.state);\n    state = state(props.username, props.password);\n    Object.entries(state).forEach(_ref => {\n      let [key, value] = _ref;\n      returns[key] = value;\n    });\n    return returns;\n  } else if (typeof props.username === \"string\" && typeof props.password === \"string\") {\n    return {\n      addState: addState\n    };\n  } else {\n    return {\n      newUser: newUser,\n      login: login\n    };\n  }\n}\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/home/lewibs/Documents/github/ottery/web-app/src/managers/User.js"],"names":["axios","backend","setDefaults","userStates","Guardian","User","props","addState","state","success","error","res","post","username","password","err","newUser","email","firstName","middleName","lastName","gender","date","country","address","city","zip","phone","login","returns","get","Object","entries","forEach","key","value"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport {\n    backend,\n    setDefaults,\n    userStates,\n} from \"./Manager\";\n\nimport Guardian from \"./Guardian\";\n\n/**\n * this is the user manager the state is the manager of the current state that the user is in\n * \n */\nfunction User(props) {\n    /*\n    {\n        username: \"\",\n        password: \"\",\n        state: \"\",\n        success: \"\",\n        error: \"\",\n    }\n    */\n\n    /**\n     * this adds a new state to the user\n     * @param {String} state \n     * @param {function} success \n     * @param {function} error \n     */\n    let addState = async (state, success, error) => {\n        [success, error] = setDefaults(success, error);\n        try {\n            const res = await axios.post(\n                `${backend}/addState`,\n                {\n                    username:props.username,\n                    password:props.password,\n                    state:state\n                }\n            );\n            success(res);\n        } catch (err) {\n            error(err);\n        }\n    }\n\n    /**\n     * this is usesd to generate a new user\n     * @param {String} email \n     * @param {String} username \n     * @param {String} password \n     * @param {String} firstName \n     * @param {String} middleName \n     * @param {String} lastName \n     * @param {String} gender \n     * @param {String} date \n     * @param {String} country \n     * @param {String} address \n     * @param {String} city \n     * @param {String} state \n     * @param {String} zip \n     * @param {String} phone \n     * @param {function} success \n     * @param {function} error \n     */\n    let newUser = async (email, username, password, firstName, middleName, lastName, gender, date, country, address, city, state, zip, phone, success, error) => {\n        [success, error] = setDefaults(success, error);\n        try {\n            const res = await axios.post(\n                `${backend}/register`,\n                {\n                    email:email,\n                    username:username,\n                    password:password,\n                    firstName:firstName,\n                    middleName:middleName,\n                    lastName:lastName,\n                    gender:gender,\n                    date:date,\n                    country:country,\n                    address:address,\n                    city:city,\n                    state:state,\n                    zip:zip,\n                    phone:phone\n                }\n            );\n            success(res)\n        } catch (err) {\n            error(err);\n        }\n    }\n\n    //i dont feel like this belongs here...\n    let login = async (username, password, success, error) => {\n        try {\n            const res = await axios.post(\n                `${backend}/login`,\n                {\n                    username:username,\n                    password:password\n                }\n            );\n            success(res);\n        } catch (err) {\n            error(err);\n        }\n    }\n\n    if (typeof props.username === \"string\" && typeof props.password === \"string\" && typeof props.state === \"string\")  {\n        let returns = {\n            addState:addState,\n        }\n        \n        let state = userStates.get(props.state);\n        state = state(props.username, props.password);\n        Object.entries(state).forEach(([key, value]) => {\n            returns[key] = value;\n        });\n        \n        return returns;\n    } else if (typeof props.username === \"string\" && typeof props.password === \"string\") {\n        return {\n            addState:addState,\n        }\n    } else {\n        return {\n            newUser:newUser,\n            login:login,\n        }\n    }\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}