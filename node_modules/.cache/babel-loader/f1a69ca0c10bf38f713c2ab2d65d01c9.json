{"ast":null,"code":"import axios from \"axios\";\nimport { backend, setDefaults, userStates } from \"./Manager\";\n/**\n * this is the user manager the state is the manager of the current state that the user is in\n * \n */\n\nfunction User(props) {\n  /*\n  props = {\n      token: token,\n      state: state,\n  }\n  */\n\n  /**\n   * this is usesd to generate a new user\n   * @param {String} email \n   * @param {String} username \n   * @param {String} password \n   * @param {String} firstName \n   * @param {String} middleName \n   * @param {String} lastName \n   * @param {String} gender \n   * @param {String} date \n   * @param {String} country \n   * @param {String} address \n   * @param {String} city \n   * @param {String} state \n   * @param {String} zip \n   * @param {String} phone \n   * @param {function} success \n   * @param {function} error \n   */\n  let newUser = async (email, username, password, firstName, middleName, lastName, gender, date, country, address, city, state, zip, phone, success, error) => {\n    [success, error] = setDefaults(success, error);\n\n    try {\n      const res = await axios.post(`${backend}/user/register`, {\n        email: email,\n        username: username,\n        password: password,\n        firstName: firstName,\n        middleName: middleName,\n        lastName: lastName,\n        gender: gender,\n        date: date,\n        country: country,\n        address: address,\n        city: city,\n        state: state,\n        zip: zip,\n        phone: phone\n      });\n      success(res);\n    } catch (err) {\n      error(err);\n    }\n  }; //i dont feel like this belongs here...\n\n\n  let login = async (username, password, success, error) => {\n    try {\n      const res = await axios.post(`${backend}/user/login`, {\n        username: username,\n        password: password\n      });\n      success(res);\n    } catch (err) {\n      error(err);\n    }\n  };\n\n  let loadUser = async (success, error) => {\n    console.log(\"loading user\");\n\n    try {\n      const res = await axios.post(`${backend}/user/load`, {\n        token: props.token\n      });\n      alert(\"good\");\n      success(res);\n    } catch (err) {\n      alert(\"bad\");\n      error(err);\n    }\n  };\n\n  let addState = async (state, success, error) => {\n    try {\n      const res = await axios.post(`${backend}/user/addState`, {\n        token: props.token,\n        state: state\n      });\n      success(res);\n    } catch (err) {\n      error(err);\n    }\n  };\n\n  if (props === undefined) {\n    return {\n      newUser: newUser,\n      login: login,\n      loadUser: loadUser\n    };\n  } else if (typeof props.token === \"string\" && typeof props.state === \"string\") {\n    let returns = {\n      addState: addState\n    };\n    let state = userStates.get(props.state);\n    Object.entries(state(props.token)).forEach(_ref => {\n      let [key, value] = _ref;\n      returns[key] = value;\n    });\n    return returns;\n  }\n}\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/home/lewibs/Documents/github/ottery/web-app/src/managers/User.js"],"names":["axios","backend","setDefaults","userStates","User","props","newUser","email","username","password","firstName","middleName","lastName","gender","date","country","address","city","state","zip","phone","success","error","res","post","err","login","loadUser","console","log","token","alert","addState","undefined","returns","get","Object","entries","forEach","key","value"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport {\n    backend,\n    setDefaults,\n    userStates,\n} from \"./Manager\";\n\n/**\n * this is the user manager the state is the manager of the current state that the user is in\n * \n */\nfunction User(props) {\n    /*\n    props = {\n        token: token,\n        state: state,\n    }\n    */\n\n    /**\n     * this is usesd to generate a new user\n     * @param {String} email \n     * @param {String} username \n     * @param {String} password \n     * @param {String} firstName \n     * @param {String} middleName \n     * @param {String} lastName \n     * @param {String} gender \n     * @param {String} date \n     * @param {String} country \n     * @param {String} address \n     * @param {String} city \n     * @param {String} state \n     * @param {String} zip \n     * @param {String} phone \n     * @param {function} success \n     * @param {function} error \n     */\n    let newUser = async (email, username, password, firstName, middleName, lastName, gender, date, country, address, city, state, zip, phone, success, error) => {\n        [success, error] = setDefaults(success, error);\n        try {\n            const res = await axios.post(\n                `${backend}/user/register`,\n                {\n                    email:email,\n                    username:username,\n                    password:password,\n                    firstName:firstName,\n                    middleName:middleName,\n                    lastName:lastName,\n                    gender:gender,\n                    date:date,\n                    country:country,\n                    address:address,\n                    city:city,\n                    state:state,\n                    zip:zip,\n                    phone:phone\n                }\n            );\n            success(res)\n        } catch (err) {\n            error(err);\n        }\n    }\n\n    //i dont feel like this belongs here...\n    let login = async (username, password, success, error) => {\n        try {\n            const res = await axios.post(\n                `${backend}/user/login`,\n                {\n                    username:username,\n                    password:password\n                }\n            );\n            success(res);\n        } catch (err) {\n            error(err);\n        }\n    }\n\n    let loadUser = async (success, error) => {\n        console.log(\"loading user\");\n        try {\n            const res = await axios.post(\n                `${backend}/user/load`,\n                {\n                    token: props.token,\n                }\n            );\n            alert(\"good\");\n            success(res);\n        } catch (err) {\n            alert(\"bad\")\n            error(err);\n        }\n    }\n\n    let addState = async (state, success, error) => {\n        try {\n            const res = await axios.post(\n                `${backend}/user/addState`,\n                {\n                    token:props.token,\n                    state:state\n                }\n            );\n            success(res);\n        } catch (err) {\n            error(err);\n        }\n    }\n\n    if (props === undefined) {\n        return {\n            newUser:newUser,\n            login:login,\n            loadUser:loadUser,\n        }\n    } else if (typeof props.token === \"string\" && typeof props.state === \"string\")  {\n        let returns = {\n            addState:addState,\n        }\n        \n        let state = userStates.get(props.state);\n        Object.entries(state(props.token)).forEach(([key, value]) => {\n            returns[key] = value;\n        });\n\n        return returns;\n    }\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}